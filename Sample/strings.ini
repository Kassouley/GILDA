[STRING]
WARNING_MSG = /* # THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY THE GILDA TOOL.\n * # DO NOT MODIFY UNLESS YOU KNOW WHAT YOU ARE DOING.\n * # ANY CHANGES MAY BE OVERWRITTEN BY SUBSEQUENT RUNS OF GILDA.\n */
SAMPLE_MSG = /* # THIS FILE IS A SAMPLE GENERATED ONLY IF THE CORRECT OPTIONS ARE SET.\n * # YOU CAN USE THIS FILE AS A TEMPLATE AND MODIFY IT AS NEEDED.\n */
SAMPLE_MSG_2 = # THIS FILE IS A SAMPLE GENERATED ONLY IF THE CORRECT OPTIONS ARE SET.\n# YOU CAN USE THIS FILE AS A TEMPLATE AND MODIFY IT AS NEEDED.\n
CURRENT_DOMAIN = NO_DOMAIN_SET

PROJECT_NAME = GILDATracer
TOOLS_NAME = gilda_tracer
TOOLS_NAME_VERB = trace
TOOLS_NAME_ADJ = traced
TOOLS_NAME_ABR = trace
TOOLS_NAME_NOUN = trace
TOOLS_NAME_GERUND = tracing

INTERCEPTOR_SRC = {TOOLS_NAME}.c
INTERCEPTOR_HDR = {TOOLS_NAME}.h

STATUS_HDR = {TOOLS_NAME}_status.h
I_STATUS_TYPE = {TOOLS_NAME}_status_t

I_DOMAIN_T = {TOOLS_NAME}_domain_t
I_API_ID_T = {TOOLS_NAME}_api_id_t
I_API_DATA_S = {TOOLS_NAME}_api_activity_s
I_API_DATA_T = {TOOLS_NAME}_api_activity_t
I_ENABLE_DOMAIN_FUNC = {TOOLS_NAME}_enable_domain
I_ENABLE_DOMAIN_FUNC_DECL = {I_STATUS_TYPE} {I_ENABLE_DOMAIN_FUNC}({I_DOMAIN_T} domain)
I_DISABLE_DOMAIN_FUNC = {TOOLS_NAME}_disable_domain
I_DISABLE_DOMAIN_FUNC_DECL = {I_STATUS_TYPE} {I_DISABLE_DOMAIN_FUNC}({I_DOMAIN_T} domain)
I_INIT_FUNC = {TOOLS_NAME}_init
I_INIT_FUNC_DECL = {I_STATUS_TYPE} {I_INIT_FUNC}()
I_FINI_FUNC = {TOOLS_NAME}_fini
I_FINI_FUNC_DECL = {I_STATUS_TYPE} {I_FINI_FUNC}()
I_GET_DOMAIN_FUNC = get_domain_name
I_GET_DOMAIN_FUNC_DECL = const char* {I_GET_DOMAIN_FUNC}({I_DOMAIN_T} domain)
I_GET_FUNAME_FUNC = get_funame_by_id
I_GET_FUNAME_FUNC_DECL = const char* {I_GET_FUNAME_FUNC}({I_DOMAIN_T} domain, {I_API_ID_T} funid)
I_GET_FUNID_FUNC = get_funid_by_name
I_GET_FUNID_FUNC_DECL = {I_API_ID_T} {I_GET_FUNID_FUNC}({I_DOMAIN_T} domain, const char* funame)
I_GET_FUNADDR_FUNC = get_funaddr_by_id
I_GET_FUNADDR_FUNC_DECL = void* {I_GET_FUNADDR_FUNC}({I_DOMAIN_T} domain, {I_API_ID_T} funid)
I_SET_CALLBACK_FUNC = {TOOLS_NAME}_set_api_callback
I_SET_CALLBACK_FUNC_DECL = {I_STATUS_TYPE} {I_SET_CALLBACK_FUNC}({I_DOMAIN_T} domain, api_callback_handler_t callback_handler)

DOMAIN_API_TABLE_VAR = {CURRENT_DOMAIN}_api_table
DOMAIN_FILTER_ENV_VAR = "{TOOLS_NAME|upper}_DOMAIN_{CURRENT_DOMAIN|upper}_FUNCTIONS"

ATM = api_table_manager
ATM_SRC = {ATM}.c
ATM_HDR = {ATM}.h
ATM_API_TABLE_T = api_table_t
ATM_INIT_FUNC = {TOOLS_NAME}_init_api_table
ATM_INIT_FUNC_DECL = {I_STATUS_TYPE} {ATM_INIT_FUNC}({I_DOMAIN_T} domain, {ATM_API_TABLE_T}* api_table, {I_API_ID_T} size)
ATM_FINI_FUNC = {TOOLS_NAME}_cleanup_api_table
ATM_FINI_FUNC_DECL = {I_STATUS_TYPE} {ATM_FINI_FUNC}({ATM_API_TABLE_T}* api_table)
ATM_ENABLE_FUNC = {TOOLS_NAME}_enable_api_table
ATM_ENABLE_FUNC_DECL = {I_STATUS_TYPE} {ATM_ENABLE_FUNC}({ATM_API_TABLE_T}* api_table, const char* env_var_name)
ATM_DISABLE_FUNC = {TOOLS_NAME}_disable_api_table
ATM_DISABLE_FUNC_DECL = {I_STATUS_TYPE} {ATM_DISABLE_FUNC}({ATM_API_TABLE_T}* api_table)
ATM_INIT_DL_FUNC = {TOOLS_NAME}_init_dl_system
ATM_INIT_DL_FUNC_DECL = {I_STATUS_TYPE} {ATM_INIT_DL_FUNC}()
ATM_POPU_FUNC = {TOOLS_NAME}_populate_api_table
ATM_POPU_FUNC_DECL = {I_STATUS_TYPE} {ATM_POPU_FUNC}({ATM_API_TABLE_T}* api_table, const char* lib_path)

TIME = {TOOLS_NAME}_time
TIME_SRC = {TIME}.c
TIME_HDR = {TIME}.h
TIMESPECT_T = {TOOLS_NAME}_timespec_t
TIME_T = {TOOLS_NAME}_time_t


LC = {TOOLS_NAME}_lifecycle
LC_SRC = {LC}.c
LC_HDR = {LC}.h
LC_T = {TOOLS_NAME}_lifecycle_t
LC_PHASE_T = {TOOLS_NAME}_phase_t
LC_INIT_FUNC = {TOOLS_NAME}_init_lifecycle
LC_INIT_FUNC_DECL = {I_STATUS_TYPE} {LC_INIT_FUNC}()
LC_FINI_FUNC = {TOOLS_NAME}_fini_lifecycle
LC_FINI_FUNC_DECL = {I_STATUS_TYPE} {LC_FINI_FUNC}()
LC_GET_PHASE_FUNC = {TOOLS_NAME}_get_current_phase
LC_GET_PHASE_FUNC_DECL = {LC_PHASE_T} {LC_GET_PHASE_FUNC}()
LC_GET_LC_FUNC = {TOOLS_NAME}_get_lifecycle
LC_GET_LC_FUNC_DECL = {LC_T} {LC_GET_LC_FUNC}()

PLUG = plugin
PLG_SRC = {PLUG}.c
DPLG_SRC = {DOMAIN}_domain/{DOMAIN}_{PLUG}.c
DPLG_HDR = {DOMAIN}_domain/{DOMAIN}_{PLUG}.h
PLG_STRUCT = {TOOLS_NAME}_plugin_t
PLG_INIT_FUNC = {TOOLS_NAME}_plugin_initialize
PLG_INIT_FUNC_DECL = {I_STATUS_TYPE} {PLG_INIT_FUNC}({PLG_STRUCT}** plugin)
PLG_FINI_FUNC = {TOOLS_NAME}_plugin_finalize
PLG_FINI_FUNC_DECL = {I_STATUS_TYPE} {PLG_FINI_FUNC}({PLG_STRUCT}** plugin)
PLG_GET_CB_FUNC = {TOOLS_NAME}_get_api_callback
PLG_GET_CB_FUNC_DECL = {I_STATUS_TYPE} {PLG_GET_CB_FUNC}(const {PLG_STRUCT}* plugin, {I_DOMAIN_T} domain, api_callback_handler_t* callback_handler)


F = {CURRENT_DOMAIN}_wrapper_functions
F_SRC = {F}.c
IF = {CURRENT_DOMAIN}_{TOOLS_NAME_ADJ}_functions
IF_SRC = {IF}.c
IF_HDR = {IF}.h
CB = api_callback_manager
CB_SRC = {CB}.c
CB_HDR = {CB}.h

DOMAIN = {CURRENT_DOMAIN}
DOMAIN_ID = {TOOLS_NAME|upper}_DOMAIN_{DOMAIN|upper}

CB_CALLBACK = __{CURRENT_DOMAIN}_callback
CB_ARGS = {I_DOMAIN_T} domain, {I_API_ID_T} id, {I_API_DATA_T}* activity
CB_OE_CALLBACK_FUNC = __on_enter_{CURRENT_DOMAIN}_callback_function
CB_OX_CALLBACK_FUNC = __on_exit_{CURRENT_DOMAIN}_callback_function
CB_SET_CALLBACK_FUNC = set_{CURRENT_DOMAIN}_api_callback
CB_SET_CALLBACK_FUNC_DECL = void {CB_SET_CALLBACK_FUNC}(api_callback_handler_t callback_handler)
CB_API_DATA_VAR = __{CURRENT_DOMAIN}_activity
CB_API_RET_VAR = __{CURRENT_DOMAIN}_ret
CB_TYPEDEF_T2 = api_callback_t
CB_TYPEDEF_T = void (*{CB_TYPEDEF_T2})({CB_ARGS})

IF_GET_FUNADDR_FUNC = get_{DOMAIN}_funaddr_by_id
IF_GET_FUNADDR_FUNC_DECL = static inline void* {IF_GET_FUNADDR_FUNC}({IF_API_ID_T} id)
IF_GET_FUNAME_FUNC = get_{DOMAIN}_funame_by_id
IF_GET_FUNAME_FUNC_DECL = static inline const char* {IF_GET_FUNAME_FUNC}({IF_API_ID_T} id)
IF_GET_FUNID_FUNC = get_{DOMAIN}_funid_by_name
IF_GET_FUNID_FUNC_DECL = static inline {IF_API_ID_T} {IF_GET_FUNID_FUNC}(const char* name)
IF_GET_POINTED_ARGS = get_{DOMAIN}_pointed_args_for
IF_GET_POINTED_ARGS_DECL = static inline void {IF_GET_POINTED_ARGS}({IF_API_ID_T} id, {IF_API_ARGS_T}* args, bool is_enter)
IF_API_ID_T = {CURRENT_DOMAIN}_api_id_t
IF_API_ID_PREFIX = {DOMAIN|upper}_API_ID_
IF_API_ARGS_S = {CURRENT_DOMAIN}_api_args_s
IF_API_ARGS_T = {CURRENT_DOMAIN}_api_args_t
STRING_SIZE_MAX = {DOMAIN|upper}_STRING_SIZE_MAX

PLG_PROCESS_FUNC = process_{DOMAIN}_args_for
PLG_PROCESS_FUNC_DECL = void {PLG_PROCESS_FUNC}({IF_API_ID_T} funid, const {IF_API_ARGS_T}* args)
PLG_OE_CALLBACK_FUNC = on_enter_{DOMAIN}_callback
PLG_OX_CALLBACK_FUNC = on_exit_{DOMAIN}_callback
PLG_OE_CALLBACK_FUNC_DECL = void {PLG_OE_CALLBACK_FUNC}({CB_ARGS})
PLG_OX_CALLBACK_FUNC_DECL = void {PLG_OX_CALLBACK_FUNC}({CB_ARGS})

[STATUS]
SUCCESS = {TOOLS_NAME|upper}_STATUS_SUCCESS
MALLOC_FAILED = {TOOLS_NAME|upper}_STATUS_MALLOC_FAILED
DLOPEN_FAILED = {TOOLS_NAME|upper}_STATUS_DLOPEN_FAILED
API_TBL_NULL = {TOOLS_NAME|upper}_STATUS_API_TABLE_IS_NULL
API_TBL_NOT_INIT = {TOOLS_NAME|upper}_STATUS_API_TABLE_NOT_INIT
CB_IS_NULL = {TOOLS_NAME|upper}_STATUS_CALLBACK_IS_NULL
PLUGIN_INIT = {TOOLS_NAME|upper}_STATUS_PLUGIN_ALREADY_INIT
PLUGIN_IS_NULL = {TOOLS_NAME|upper}_STATUS_PLUGIN_IS_NULL
UNKNOWN_DOMAIN = {TOOLS_NAME|upper}_STATUS_UNKNOWN_DOMAIN
INVALID_PTR = {TOOLS_NAME|upper}_STATUS_INVALID_PTR

[STATUS_MSG]
SUCCESS_MSG = Function return success
MALLOC_FAILED_MSG = Memory allocation failed
DLOPEN_FAILED_MSG = Failed to open library
API_TBL_NULL_MSG = The API table is NULL or not initialized
API_TBL_NOT_INIT_MSG = Arrays in API table not initialized
CB_IS_NULL_MSG = Enter or exit callback has not been correctly set
PLUGIN_INIT_MSG = The plugin is not null or has already been initialized
PLUGIN_IS_NULL_MSG = The plugin is NULL or not initialized
UNKNOWN_DOMAIN_MSG = Domain in argument does not exist
INVALID_PTR_MSG = Invalid structure pointer (NULL)
